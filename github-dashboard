#!/usr/bin/env perl
# Copyright 2015 by David Golden
# Licensed under CC0 https://creativecommons.org/publicdomain/zero/1.0/
# Updated 2016-03-01:
# - more variation in organizations selected; you will want to customize this
# yourself
# - splits out wishlists differently/correctly
# - reports only PRs unless --all is specified
use v5.10;
use strict;
use warnings;
use utf8;
use Carp qw/ croak /;
use POSIX       ();
use Net::GitHub ();
use Getopt::Lucid qw/ Param Switch /;
use List::Util qw/ max /;
use Path::Tiny qw/ path tempdir tempfile cwd /;

my $opts = Getopt::Lucid->getopt(
    [
        #<<< No perltidy
        Param('format')->default(''),
        Switch('all|a'),
        Switch('ptg'),
        Switch('url'),
        #>>>
    ]
);

$opts->validate;

my $format = $opts->get_format;
my $adoc   = ( $format eq 'asciidoc' );
if ($format)
{
    if ( not $adoc )
    {
        die "Format must be asciidoc!";
    }
}
my $text = <<"EOF";
GitHub Dashboard
================
:Date: @{[POSIX::strftime("%Y-%m-%d", localtime())]}
:Revision: \$Id\$

[width="100%"]
|===========================================================
EOF

sub _git_config
{
    my $key = shift;
    chomp( my $value = `git config --get $key` );
    croak "Unknown $key" unless $value;
    return $value;
}

my %WATCHLIST = map { $_ => 1 } qw(
    CPAN-Common-Index
    File-Temp
    Parse-CPAN-Meta
    Perl-OSType
    Sub-Uplevel
    YAML-Tiny
);

sub _ptg_watched
{
    my $repo = $_[0]{repository}{name};
    return 1 if $WATCHLIST{$repo};
    return 1 if $repo =~ /^CPAN-Meta/;
    return;
}

my $github_user  = _git_config("github.user");
my $github_token = _git_config("github.token");

my $gh = Net::GitHub->new( access_token => $github_token );

sub _user_map
{
    my $issue = shift;
    return +{
        base_url => "https://github.com/${github_user}",
        issue    => $issue,
    };
}
my @issues;

sub _add_issues
{
    my $aref = shift;
    push @issues, map { _user_map($_) } @$aref;
    return;
}

# just xdg issues
_add_issues( [ $gh->query("/user/issues?filter=all&state=open") ] );
while ( $gh->has_next_page )
{
    _add_issues( [ $gh->next_page ] );
}

# select org issues
for my $org (qw//)
{
    _add_issues( [ $gh->query("/orgs/$org/issues?filter=all&state=open") ] );
    while ( $gh->has_next_page )
    {
        _add_issues( [ $gh->next_page ] );
    }
}

# select PTG issues
if ( $opts->get_ptg )
{
    _add_issues(
        [
            grep { _ptg_watched($_) } $gh->query(
                "/orgs/Perl-Toolchain-Gang/issues?filter=all&state=open")
        ]
    );
    while ( $gh->has_next_page )
    {
        _add_issues( [ grep { _ptg_watched($_) } $gh->next_page ] );
    }
}

my %dash;
for my $i_record (@issues)
{
    my $i        = $i_record->{issue};
    my $base_url = $i_record->{base_url};
    my $name     = $i->{repository}{name};
    for (qw/PR wish issue total/)
    {
        $dash{$name}{$_} //= 0;
    }
    my $labels   = $i->{labels};
    my $wishlist = $i->{title} =~ /wish-?list/i
        || grep { /enhancement|question|wishlist/i }
        map { $_->{name} } @{ $i->{labels} };
    my $type =
          exists $i->{pull_request} ? 'PR'
        : $wishlist                 ? 'wish'
        :                             'issue';
    $dash{$name}{$type}++;
    $dash{$name}{total}++ unless $wishlist;
    $dash{$name}{url} = "$base_url/${name}";
}

my $width = max( map { length($_) } keys %dash );

my @sorted = sort {
           $dash{$b}{PR} <=> $dash{$a}{PR}
        || $dash{$b}{issue} <=> $dash{$a}{issue}
        || lc($a) cmp lc($b)
} keys %dash;
my $get_all = $opts->get_all;
my $get_url = $opts->get_url;
PRINT:
for my $k (@sorted)
{
    my $rec = $dash{$k};

    next PRINT unless $get_all || $rec->{PR};
    my $url = $rec->{url};
    printf( "%*s %3d %3d %3d%s\n",
        $width, $k, $rec->{PR}, $rec->{issue}, $rec->{wish},
        ( $get_url ? (" $url") : ("") ) );
    $text .= sprintf( "|%s[%s] |%d |%d |%d%s\n",
        $url, $k, $rec->{PR}, $rec->{issue}, $rec->{wish},
        ( $get_url ? ("| $url") : ("") ) );
}

$text .= <<'EOF';
|===========================================================
EOF

if ($adoc)
{
    my $filename = 'dashy.asciidoc';

    path($filename)->spew_utf8($text);
}
